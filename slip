#! /bin/bash

set -eo pipefail

VERSION="1.0.22"

# Sane defaults in case of not being set in the config / config not existing.
CREDENTIALS_FILE="$HOME/.config/slip/credentials"
RECORD_PIDFILE="/tmp/slip_record.pid"
IMAGES="$HOME/Pictures"
VIDEOS="$HOME/Videos"
GIF_SCALE="640"
SOUND=0
DMENU_PROMPT="slip"

DMENU_CMD="dmenu -f -i -p $DMENU_PROMPT"

UPLOAD_TO_ACC=1

# Load config.
CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/slip/config"
if [ -f $CONFIG ]; then
    source $CONFIG
else
    echo "No config was found, using default options.  Please copy the example configuration to ~/.config/slip/config from https://github.com/Toqozz/slip"
fi

CLIENT_ID="abd3a90bbfb65e9"

# Dmenu prompts.
DMENU_OPTS="screenshot
video
gif
nothing"
DMENU_RECORD_OPTS="stop
nothing"
DMENU_UPLOAD_OPTS_BIG="delete
nothing"
DMENU_UPLOAD_OPTS="upload
delete
nothing"

# Maximum size for upload (kb).
MAX_GIF_SIZE=10000

function usage() {
    echo ""
    echo "  slip [ -h | -v | -s | -r | -a | -q ]"
    echo "      Uploads images taken with ffmpeg via slop to imgur.  Quick video recording."
    echo "      That's all."
    echo ""
    echo "      -h  show this help"
    echo "      -v  show version"
    echo "      -s  take a screenshot (skip dmenu)"
    echo "      -g  take a gif (skip dmenu)"
    echo "      -r  take a video (skip dmenu)"
    echo "      -q  stop recording a video / gif (skip dmenu) (only when recording)"
    echo ""
}

# Imgur needs to know what program is using its services.
function curl_imgur() {
    curl -sH "$@"
}

function upload() {
    file="$1"

    if [ -f "$file" ]; then
        if [ $UPLOAD_TO_ACC -eq 1 ]; then
            # We have an auth token to use.
            check_auth_credentials
            if [ $? -ne 1 ]; then
                # Token valid.
                curl_imgur "Authorization: Bearer ${access_token}" -F "image=@$file" "https://api.imgur.com/3/upload"
            fi
        else
            curl_imgur "Authorization: Client-ID ${CLIENT_ID}" -F "image=@$file" "https://api.imgur.com/3/upload"
        fi
    else
        echo "File does not exist, what happened?"
    fi
}

function check_auth_credentials() {
    token_expire_time=0
    if [ -f "${CREDENTIALS_FILE}" ]; then
        source "${CREDENTIALS_FILE}"
    fi

    if [ ! -z ${access_token} ]; then
        current_time="$(date +%s)"
        preemptive_refresh_time="$((10*60))"
        expired="$((current_time > (token_expire_time - preemptive_refresh_time)))"

        if [ "${expired}" -eq "0" ]; then
            #token has expired, get a new one.
            echo 'The authorization token has expired, please get a new one.'
            return 1;
        fi
    else
        return 1;
    fi
}

function clip_clear() {
    # Clear x cliboard selection.
    xsel -bc    # Ctrl-v / Shift-Insert.
    # xsel -pc  # Middle click.
}

# Run slop and get the geometry line.
function slop_geom() {
    if [ "$1" = "image" ]; then
        slop -f '%wx%h+%x+%y'
    else
        slop -f '%wx%h|%x,%y' # | sed -e s/+/\|/ -e s/+/,/
    fi
    #elif [ "$1" = "video" ]; then
        #slop -f '%wx%h+%x+%y' | sed -e s/+/\|/ -e s/+/,/
        #slop | sed -n 5p | sed -e s/G=// -e s/+/\|/ -e s/+/,/
    #elif [ "$1" = "gif" ]; then
        #slop -f '%wx%h+%x+%y' | sed -e s/+/\|/ -e s/+/,/
}

# Take the shot (or start the video.)
function shot() {
    if [ "$1" = "image" ]; then
        extension=".png"    # img-2016-04-16-153906.png
        filename="$IMAGES/img-`date +%Y-%m-%d-%H%M%S`$extension"    # .png, .jpg
        maim -g "$2" $filename
        # TODO, do we want more dependencies? (optional dependencies?)
        #ffmpeg -f x11grab -video_size "$2" -i "$DISPLAY+$3" -vframes 1 $filename &> /dev/null
    elif [ "$1" = "video" ]; then
        extension=".mkv"    # vid-2016-04-16-153906.mkv
        filename="$VIDEOS/vid-`date +%Y-%m-%d-%H%M%S`$extension"    # .mkv, .mp4
        if [ $SOUND == 0 ]; then
            ffmpeg -f x11grab -video_size "$2" -framerate 60 -i "$DISPLAY+$3" -loglevel quiet -c:v libx264 -preset ultrafast $filename  &
        else
            ffmpeg -f pulse -i 1 -f x11grab -video_size "$2" -framerate 60 -i "$DISPLAY+$3" -loglevel quiet -c:v libx264 -preset ultrafast $filename &
        fi
        echo "$! vid $filename" > "$RECORD_PIDFILE"
    elif [ "$1" = "gif" ]; then
        extension=".gif"    # gif-2016-04-16-153906.gif
        tmpfilename="/tmp/gif-`date +%Y-%m-%d-%H%M%S-tmp`.mkv"
        filename="$VIDEOS/gif-`date +%Y-%m-%d-%H%M%S`$extension"    # .gif
        # Record a video to be converted to gif.
        ffmpeg -f x11grab -video_size "$2" -framerate 15 -i "$DISPLAY+$3" -loglevel quiet -c:v libx264 -preset ultrafast $tmpfilename &
        #ffmpeg -f x11grab -video_size "$2" -framerate 15 -i "$DISPLAY+$3" -vf scale="$GIF_SCALE:-1" $filename &> /dev/null &

        # We need to access this information later.
        ratio=$(awk -F"x" '{ print int($1/$2) }' <<< "$2") # We only really need a binary answer.
        if [ "$ratio" -ge 1 ]; then echo "$! gif $tmpfilename $filename 0" > "$RECORD_PIDFILE"
        else echo "$! gif $tmpfilename $filename 1" > "$RECORD_PIDFILE"
        fi
    fi
}

function kill_ffmpeg() {
    # Kill ffmpeg (stopping the recording.)
    kill $1 || echo "Failed to kill ffmpeg, did it crash?  Removing $RECORD_PIDFILE anyway."
    # Remove the pid file so that slip can be used as normal again.
    rm "$RECORD_PIDFILE"
}

function stop_rec() {
    local choice

    pid=$1                      # Process id (for killing ffmpeg).
    tfn=$3                      # Temp file name (for gifs).
    fn=$4                       # File name for the gif/vid we're saving.
    pfn="${tfn}-palette.png"    # Palette file name (for gif rendering).

    # Stop recording.
    kill_ffmpeg "$pid"

    # If we have a gif, don't always save it (might be too large, or something.
    if [ "$2" = "gif" ]; then
        # If the width is larger than the height, we want to scale with the width, otherwise scale with the height.
        local ratio
        if [ "$5" -eq 0 ]; then
            ratio="$GIF_SCALE:-1"
        else
            ratio="-1:$GIF_SCALE"
        fi

        notify "Converting to gifâ€¦" 7
        # Give enough time to save the file.
        sleep 1 && ffmpeg -i "$tfn" -loglevel quiet -vf fps=15,scale="$ratio":flags=lanczos,palettegen "$pfn" &&
        ffmpeg -i "$tfn" -i "$pfn" -loglevel quiet -filter_complex "fps=15,scale=$ratio:flags=lanczos[x];[x][1:v]paletteuse" "$fn" &&
        size=$(du -k $fn | cut -f1)

        echo "$size"
        if [ "$size" -lt "${MAX_GIF_SIZE}" ]; then
            # Prompt user (upload, delete, do nothing (save).
            notify "File is small enough to upload." 10
            choice=$($DMENU_CMD <<< $DMENU_UPLOAD_OPTS)
        else
            notify "File is too large to upload." 10
            choice=$($DMENU_CMD <<< $DMENU_UPLOAD_OPTS_BIG)
        fi

        if [ "$choice" = "upload" ]; then
            clip_clear
            output=$(upload "$fn")
            url=$(parse "imgur" "$output")
            notify "$url" 7
            echo "$url"
            echo "$url" | xsel -bi  # Read to clipboard.
        elif [ "$choice" = "delete" ]; then
            rm $fn
        fi
    fi
}

# Parse x,y -- but also imgur.
function parse() {
    if [ "$1" = "geometryx" ]; then
        awk -F"|" '{ print $1 }' <<< "$2" 
    elif [ "$1" = "geometry+" ]; then
        awk -F"|" '{ print $2 }' <<< "$2"
    elif [ "$1" = "imgur" ]; then
        sed -e 's/.*\"link\":"\([^"]*\).*/\1/' -e 's/\\//g' <<< "$2"
    fi
}

function notify() {
    notify-send -t $2 "slip" "$1"
}

# Delete a file.
function remove() {
    rm "$filename"
}

function main() {
    if [ "$1" = "screenshot" ]; then
        # Clear cliboard before doing anything.
        clip_clear
        # Run slop and get geometry from it.
        # maim naturally supports slop's output coordinates.
        geometry=$(slop_geom "image")
        # Take the shot.
        shot "image" "$geometry"
        # Parse imgur json into link.
        output=$(upload "$filename")
        url=$(parse "imgur" "$output")
        # Notify user that upload has finished.
        notify "$url" 7
        # Delete the file.
        # remove
        echo "$url"
        echo "$url" | xsel -bi  # Read to clipboard.
        # echo "$url" | xsel -pi  # Read to primary.
    elif [ "$1" = "video" ]; then
        geometry=$(slop_geom "video")
        wxh=$(parse "geometryx" $geometry)
        off=$(parse "geometry+" $geometry)
        shot "video" "$wxh" "$off"
    elif [ "$1" = "gif" ]; then
        geometry=$(slop_geom "gif")
        wxh=$(parse "geometryx" $geometry)
        off=$(parse "geometry+" $geometry)
        shot "gif" "$wxh" "$off"
    elif [ "$1" = "stop" ]; then
        # Get info of recording process.
        local info
        # Get infor from the pidfile.
        info=$(cat "$RECORD_PIDFILE")
        # Stop with parameters ("<pid> <type> <filename>")
        stop_rec $info
        exit 0
    else
        exit 0
    fi
}

# Dependencies.
depends="curl
maim
slop
ffmpeg"
while read line
do
    if ! type $line &> /dev/null ; then
        echo "$line not found, expect unexpected."
    fi
done <<< "$depends"

# Main.
if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
elif [ "$1" = "-v" -o "$1" = "--version" ]; then
    echo "Version: $VERSION"
    exit 0
elif [ "$1" = "-s" -o "$1" = "--screenshot" ]; then
    main "screenshot"
elif [ "$1" = "-g" -o "$1" = "--gif" ]; then
    main "gif"
elif [ "$1" = "-r" -o "$1" = "--record" ]; then
    main "video"
elif [ "$1" = "-q" -o "$1" = "--stop" ]; then
    main "stop"
elif [ $# == 0 ]; then
    if [ -a "$RECORD_PIDFILE" ]; then
        main $($DMENU_CMD <<< "$DMENU_RECORD_OPTS")
    else
        main $($DMENU_CMD <<< "$DMENU_OPTS")
    fi
fi
